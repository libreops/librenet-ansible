---
- name: Install diaspora system dependencies
  yum: name="{{ item }}" state=present
  with_items:
    - git
    - wget
    - ImageMagick-devel
    - nodejs
    - ruby
    - ruby-devel
    - libxslt-devel
    - libxml2-devel
    - gcc
    - patch

- name: Install bundler
  gem: name=bundler state=present user_install=no
  register: bundler
  tags:
    - gem
    - bundler
    - git

- name: Create bundle symlink to /usr/bin
  file: src=/usr/local/bin/bundle dest=/usr/bin/bundle state=link
  tags:
    - bundler
    - git

- name: Create repo directory
  file: >
    path=/var/www/diaspora
    state=directory
    owner=diaspora
    group=diaspora
    mode=0755

- name: Create log directory
  file: >
    path=/var/log/diaspora
    state=directory
    owner=diaspora
    group=diaspora
    mode=0755

- name: Get last remote commit sha
  shell: >
    git ls-remote {{ git_repo_url }} HEAD | awk '{print $1}'
  register: remote_sha
  changed_when: false
  tags:
    - git

- name: Get last local commit sha
  shell: >
    chdir=/var/www/diaspora/
    git rev-parse HEAD
  register: local_sha
  changed_when: false
  ignore_errors: yes
  tags:
    - git

- name: Git checkout librenet branch
  sudo_user: diaspora
  git:
    repo: "{{ git_repo_url }}"
    version: "{{ git_branch }}"
    dest: "{{ diaspora_dir }}"
    remote: "{{ git_branch }}"
    accept_hostkey: yes
    force: yes
  when: (remote_sha.stdout != local_sha.stdout or local_sha.stdout == "")
  register: git_checkout
  tags:
    - git
    - deploy

- name: stat Gemfile.lock
  stat: path=/var/www/diaspora/diaspora/Gemfile.lock
  register: gemfile_lock

- name: Copy unicorn.rb
  template: >
    src=unicorn.rb.j2
    dest="{{ diaspora_dir }}/config/unicorn.rb"
    owner=diaspora
    group=diaspora
    mode=0644
  notify:
    - restart unicorn
  tags:
    - config
    - unicorn

- name: Copy diaspora.yml
  template: >
    src=diaspora.yml.j2
    dest="{{ diaspora_dir }}/config/diaspora.yml"
    owner=diaspora
    group=diaspora
    mode=0644
  notify:
    - restart unicorn
    - restart sidekiq
  tags:
    - config
    - private
    - yaml
    - unicorn
    - sidekiq

- name: Copy database.yml
  template: >
    src=database.yml.j2
    dest="{{ diaspora_dir }}/config/database.yml"
    owner=diaspora
    group=diaspora
    mode=0644
  register: database_yml
  notify:
    - restart unicorn
    - restart sidekiq
  tags:
    - config
    - database
    - yaml

- name: Copy sidekiq.yml
  template: >
    src=sidekiq.yml.j2
    dest="{{ diaspora_dir }}/config/sidekiq.yml"
    owner=diaspora
    group=diaspora
    mode=0644
  notify:
    - restart sidekiq
  tags:
    - diaspora
    - config
    - sidekiq
    - yaml

- name: Copy newrelic.yml
  template: >
    src=newrelic.yml.j2
    dest="{{ diaspora_dir }}/config/newrelic.yml"
    owner=diaspora
    group=diaspora
    mode=0644
  notify:
    - restart unicorn
  tags:
    - diaspora
    - config
    - newrelic
    - yaml

- name: Install gem dependencies
  sudo_user: diaspora
  shell: /usr/bin/bundle install --without test development --no-deployment --path vendor/bundle
  args:
    chdir: "{{ diaspora_dir }}"
  environment:
    RAILS_ENV: production
    DB: postgres
  register: bundle_install
  when: bundler|success
  tags:
    - gem
    - bundler
    - update

# Pick a table of Diaspora's schema db and check against it.
# If the database is populated, the 'tags' table should exist.
# If it exists, the output should be: (1 row).
- name: Check if database is already populated
  sudo_user: postgres
  shell: psql -d diaspora_production -c "SELECT relname FROM pg_class WHERE relname='tags';" | grep '(1 row)'
  ignore_errors: true
  changed_when: false
  register: check_db
  tags:
    - database

- name: Initial Seed of database (destructive, runs only the first time)
  sudo_user: diaspora
  shell: /usr/bin/bundle exec "rake db:create db:schema:load"
  args:
    chdir: "{{ diaspora_dir }}"
  environment:
    RAILS_ENV: production
    DB: postgres
  when: check_db.stdout == "(0 rows)"
  tags:
    - database
    - seed

- name: stat db/schema.rb
  stat: path=/var/www/diaspora/db/schema.rb
  register: schemarb

- name: Migrate database
  sudo_user: diaspora
  shell: /usr/bin/bundle exec "rake db:migrate"
  args:
    chdir: "{{ diaspora_dir }}"
  environment:
    RAILS_ENV: production
    DB: postgres
  when: bundle_install|success and schemarb.changed == true
  tags:
    - update
    - database
    - migration

  # Recompile assets
- name: Recompile assets
  sudo_user: diaspora
  shell: /usr/bin/bundle exec "rake assets:precompile"
  args:
    chdir: "{{ diaspora_dir }}"
  environment:
    RAILS_ENV: production
    DB: postgres
  when: bundle_install|success
  notify:
    - restart unicorn
  tags:
    - update
    - assets
