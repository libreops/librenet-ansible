---
- name: Install diaspora system dependencies
  yum: name="{{ item }}" state=present
  with_items:
    - git
    - wget
    - ImageMagick-devel
    - redis
    - nodejs
    - ruby
    - ruby-devel
    - libxslt-devel
    - libxml2-devel
    - gcc
  tags:
    - diaspora

- name: Install bundler
  gem: name=bundler state=present user_install=no
  register: bundler
  tags:
    - gem
    - bundler

- name: Create bundle symlink to /usr/bin
  file: src=/usr/local/bin/bundle dest=/usr/bin/bundle state=link
  tags:
    - bundler

- name: Add diaspora user
  user:
    name: diaspora
    comment: "Diaspora"
    shell: /bin/bash
    home: /home/diaspora
    move_home: yes
  register: add_user

- name: Create repo directory
  file: >
    path=/var/www/diaspora
    state=directory
    owner=diaspora
    group=diaspora
    mode=755

- name: Get last remote commit sha
  shell: >
    git ls-remote https://github.com/librenet/librenet.gr.git HEAD | awk '{print $1}'
  register: remote_sha
  changed_when: false

- name: Get last local commit sha
  shell: >
    chdir=/var/www/diaspora/
    git rev-parse HEAD
  register: local_sha
  changed_when: false
  ignore_errors: yes

- name: Git checkout librenet branch
  sudo_user: diaspora
  git:
    repo: "{{ git_repo_url }}"
    version: "{{ git_branch }}"
    dest: "{{ diaspora_dir }}"
    remote: librenet
    accept_hostkey: yes
  when: add_user|success and (remote_sha.stdout != local_sha.stdout)
  register: git_checkout
  tags:
    - git
    - diaspora
    - deploy
    - assets

- name: stat Gemfile.lock
  stat: path=/var/www/diaspora/diaspora/Gemfile.lock
  register: gemfile_lock

- name: Copy routes.rb
  template: >
    src=routes.rb.j2
    dest="{{ diaspora_dir }}/config/routes.rb"
    owner=diaspora
    group=diaspora
    mode=644
  notify:
    - restart unicorn
  tags:
    - diaspora
    - config
    - unicorn

- name: Copy unicorn.rb
  template: >
    src=unicorn.rb.j2
    dest="{{ diaspora_dir }}/config/unicorn.rb"
    owner=diaspora
    group=diaspora
    mode=644
  notify:
    - restart unicorn
  tags:
    - diaspora
    - config
    - unicorn

- name: Copy diaspora.yml
  template: >
    src=diaspora.yml.j2
    dest="{{ diaspora_dir }}/config/diaspora.yml"
    owner=diaspora
    group=diaspora
    mode=644
  notify:
    - restart unicorn
    - restart sidekiq
  tags:
    - diaspora
    - config
    - private
    - yaml
    - unicorn
    - sidekiq

- name: Copy database.yml
  template: >
    src=database.yml.j2
    dest="{{ diaspora_dir }}/config/database.yml"
    owner=diaspora
    group=diaspora
    mode=644
  register: database_yml
  notify:
    - restart unicorn
    - restart sidekiq
  tags:
    - diaspora
    - config
    - database
    - yaml

- name: Install gem dependencies
  sudo_user: diaspora
  shell: >
    chdir="{{ diaspora_dir }}"
    creates="{{ diaspora_dir }}"/vendor/bundle/
    RAILS_ENV=production /usr/bin/bundle install --without test development --deployment
  register: bundle_install
  when: bundler|success
  tags:
    - gem
    - bundler
    - update

- name: Check if database is already populated
  command: test -f "/var/lib/mysql/{{ mysql_databases[0].name }}/aspects.frm"
  ignore_errors: true
  changed_when: false
  register: init_seed
  tags:
    -database

- name: Initial Seed of database (destructive, run only 1st time)
  sudo_user: diaspora
  shell: >
    chdir="{{ diaspora_dir }}"
    RAILS_ENV=production  /usr/bin/bundle exec "rake db:create db:schema:load"
  when: init_seed|failed
  tags:
    - database
    - seed

- name: stat db/schema.rb
  stat: path=/var/www/diaspora/db/schema.rb
  register: schemarb

- name: Migrate database
  sudo_user: diaspora
  shell: >
    chdir="{{ diaspora_dir }}"
    RAILS_ENV=production /usr/bin/bundle exec "rake db:migrate"
  when: bundle_install|success and schemarb.changed == true
  tags:
    - update
    - database
    - migration

  # Recompile assets only if any file has changed
- name: Recompile assets
  sudo_user: diaspora
  shell: >
    chdir="{{ diaspora_dir }}"
    RAILS_ENV=production /usr/bin/bundle exec "rake assets:precompile"
  when: bundle_install|success
  notify:
    - restart unicorn
  tags:
    - update
    - assets
