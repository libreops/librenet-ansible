#!/usr/bin/env bash
set -e

# Backblaze B2 configuration variables
B2_ACCOUNT="{{ account }}"
B2_KEY="{{ key }}"
B2_BUCKET="{{ bucket }}"
export PASSPHRASE="{{ passphrase }}"

# Local configuration variables
DATE=$(date +%F-%s)
DEST="/var/backup/diaspora"
LOGFILE="${DEST}/backup.log"
TARFILE="${DEST}/diaspora-${DATE}.tar.gz"
SQLFILE="${DEST}/diaspora.psql"
UPLOADSDIR="/var/www/diaspora/public/uploads"
PROSODYDIR="/var/lib/prosody"

# Make sure backup dir exits
[ ! -d "$DEST/latest" ] && mkdir -p "$DEST/latest"

# Dump Diaspora's postgres database.
# You must have /home/diaspora/.pgpass properly configured.
sudo -u diaspora -H pg_dump -Fc diaspora_production -f ${SQLFILE}

# Backblaze backup
# Remove files older than 40 days from Backblaze
duplicity remove-older-than 40D --force b2://${B2_ACCOUNT}:${B2_KEY}@${B2_BUCKET}
# Sync everything to Backblaze
duplicity --full-if-older-than 1M --include=${SQLFILE} --include=${UPLOADSDIR} --include=${PROSODYDIR} --exclude='**' / b2://${B2_ACCOUNT}:${B2_KEY}@${B2_BUCKET}
# Cleanup failures
duplicity cleanup --force b2://${B2_ACCOUNT}:${B2_KEY}@${B2_BUCKET}

# Local backup
# Tar everything up and then gunzip it.
tar zcf ${TARFILE} ${UPLOADSDIR} ${PROSODYDIR} ${SQLFILE}
# If backup completed successfully, remove the SQL dump.
[ $? -eq 0 ] && rm ${SQLFILE}
# Keep a simple backup log with size name and md5sum.
echo -e "$(du -sh ${TARFILE})\t$(md5sum ${TARFILE} | awk '{print $1}')" >> ${LOGFILE}
# Encrypt it
gpg2 -c --passphrase "${PASSPHRASE}" --batch -o ${TARFILE}.gpg ${TARFILE}
# Remove tars and old backups.
rm -rf ${DEST}/latest/*.gpg
rm -rf ${TARFILE}
# Copy tar backup to `latest/` dir. Hack to download latest backup via ansible.
mv ${TARFILE}.gpg ${DEST}/latest/
